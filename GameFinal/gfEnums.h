#ifndef __GF_ENUMS_H__
#define __GF_ENUMS_H__

namespace gf
{
	enum E_COMPARISON_FUNC
	{
		ECF_NEVER,
		ECF_LESS,
		ECF_EQUAL,
		ECF_LESS_EQUAL,
		ECF_GREATER,
		ECF_NOT_EQUAL,
		ECF_GREATER_EQUAL,
		ECF_ALWAYS
	};

	enum E_PIPELINE_USAGE
	{
		EPU_FORWARD = 0,				// 000
		EPU_DIR_SHADOW_MAP = 1,			// 001
		EPU_POINT_SHADOW_MAP = 2,		// 010
		EPU_DEBUG = 3,					// 011
		EPU_DEFERRED_SHADING = 4,		// 100

		EPU_REFLECT_FORWARD = 8,				// 1000
		EPU_REFLECT_DIR_SHADOW_MAP = 9,			// 1001
		EPU_REFLECT_POINT_SHADOW_MAP = 10,		// 1010
		EPU_REFLECT_DEBUG = 11,					// 1011
		EPU_REFLECT_DEFERRED_SHADING = 12,		// 1100

		EPU_COUNT
	};

	enum E_TEXTURE_BIND_TYPE
	{
		ETBT_SHADER_RESOURCE = (1),
		ETBT_RENDER_TARGET = (1 << 2),
		ETBT_DEPTH_STENCIL = (1 << 3),
		ETBT_UNORDERED_ACCESS = (1 << 4),
		ETBT_CPU_ACCESS_READ = (1 << 5),
		ETBT_CPU_ACCESS_WRITE = (1 << 6),
		ETBT_BUFFER_APPEND = (1 << 7),
	};


	enum E_VERTEX_FORMAT
	{
		EVF_POSITION = 1,
		EVF_COLOR = (1 << 1),
		EVF_NORMAL = (1 << 2),
		EVF_TANGENT = (1 << 3),
		EVF_BINORMAL = (1 << 4),
		EVF_TEXCOORD0 = (1 << 5),
		EVF_TEXCOORD1 = (1 << 6),
		EVF_TEXCOORD2 = (1 << 7),
		EVF_TEXCOORD3 = (1 << 8),
		EVF_TEXCOORD4 = (1 << 9),
		EVF_TEXCOORD5 = (1 << 10),
		EVF_TEXCOORD6 = (1 << 11),
		EVF_TEXCOORD7 = (1 << 12),
		EVF_SIZE = (1 << 13),
	};
	
	//orientation
	enum E_SPACE_ORIENTATION
	{
		ESO_LEFT_UP_FRONT = 0,	// 000
		ESO_LEFT_UP_BACK,		// 001
		ESO_LEFT_DOWN_FRONT,	// 010
		ESO_LEFT_DOWN_BACK,		// 011
		ESO_RIGHT_UP_FRONT,		// 100
		ESO_RIGHT_UP_BACK,		// 101
		ESO_RIGHT_DOWN_FRONT,	// 110
		ESO_RIGHT_DOWN_BACK,	// 111
	};

	enum E_TEXTURE_LOCK_TYPE
	{
		ETLT_READ,
		ETLT_WRITE,
		ETLT_READ_WRITE,
		ETLT_WRITE_DISCARD,
		ETLT_WRITE_NO_OVERWRITE
	};

}


#endif
